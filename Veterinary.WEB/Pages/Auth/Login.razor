@page "/Login"
@using Veterinary.Shared.DTOs;
@using Veterinary.WEB.AuthenticationProviders;
@using Veterinary.WEB.Services
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<h3>Iniciar Sesión</h3>



        <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />

            <div class="card bg-light">
                <div class="card-header justify-content-center">
                    <span>
                        <i class="oi oi-account-login" /> Iniciar Sesión
                        <button class="btn btn-sm btn-primary float-end" type="submit"><i class="bi bi-box-arrow-in-right" /> Iniciar Sesión</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@loginDTO.Email" />
                            <ValidationMessage For="@(() => loginDTO.Email)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" />
                            <ValidationMessage For="@(() => loginDTO.Password)" />
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>

        @code {
            private LoginDTO loginDTO = new();

            private async Task LoginAsync()
            {
                var responseHttp = await repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
                if (responseHttp.Error)
                {
                    var message = await responseHttp.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                    return;
                }

                await loginService.LoginAsync(responseHttp.Response!.Token);
                navigationManager.NavigateTo("/");
            }
        }

